<script type="text/javascript">
window.MathJax = {
    AuthorInit: function () {
        MathJax.Hub.Register.LoadHook("[MathJax]/jax/output/HTML-CSS/config.js", function () {
            MathJax.OutputJax["HTML-CSS"].webfontDir = "/mathjax-extra/webfonts";
            MathJax.OutputJax["HTML-CSS"].fontDir = "/mathjax-extra/webfontsdata";
        });
        MathJax.Hub.Register.LoadHook("[MathJax]/jax/output/SVG/config.js", function () {
            MathJax.OutputJax["SVG"].fontDir = "/mathjax-extra/svg";
        });
        MathJax.Hub.Register.StartupHook("SVG Jax Config", function (message) {
            MathJax.OutputJax.SVG.fontNames.unshift("CMBright");
            MathJax.OutputJax.SVG.fontNames.unshift("SansMathFonts");
        });
    },
    styles: {
        ".MathJax:before, .MathJax:after": {
            content: "\"\\2005\""
        },
        ".MathJax_Display": {
            "overflow-x": "scroll"
        },
        ".MathJax_Display > .MathJax:before, .MathJax_Display > .MathJax:after": {
            content: "\"\""
        },
        ".MathJax .mtext:before, .MathJax .mtext + *:before": {
            content: "\"\\2005\""
        },
        ".MathJax .mtext": {
            "font-weight": "300",
        },
        ".MathJax .mo + .mtext:before, .MathJax .mtext + .mo:before": {
            content: "\"\""
        },
        ".MathJax_Display + script[id^=\"MathJax-Element\"] + br": {
            display: "none"
        },
        ".MathJax_SVG:before, .MathJax_SVG:after": {
            content: "\"\\2005\""
        },
        ".MathJax_SVG_Display > .MathJax_SVG:before, .MathJax_SVG_Display > .MathJax_SVG:after": {
            content: "\"\""
        },
        ".MathJax_SVG_Display + script[id^=\"MathJax-Element\"] + br": {
            display: "none"
        },
        "span.MathJax_MathML:before, span.MathJax_MathML:after": {
            content: "\"\\2005\""
        },
        ".MathJax_MathML mtext:before, .MathJax_MathML mtext:after": {
            content: "\"\\2005\""
        },
        ".MathJax_CHTML:before, .MathJax_CHTML:after": {
            content: "\"\\2005\""
        },
        ".MathJax_CHTML_Display > .MathJax_CHTML:before, .MathJax_CHTML_Display > .MathJax_CHTML:after": {
            content: "\"\""
        },
        ".MathJax_CHTML .MJXc-mtext:before, .MathJax_CHTML .MJXc-mtext + *:before": {
            content: "\"\\2005\""
        },
        ".MathJax_CHTML .MJXc-mo + .MJXc-mtext:before, .MathJax_CHTML .MJXc-mtext + .MJXc-mo:before": {
            content: "\"\""
        },
        ".MathJax_CHTML_Display + script[id^=\"MathJax-Element\"] + br": {
            display: "none"
        }
    },
    tex2jax: {
        inlineMath: [['$','$'], ["\\(","\\)"]],
        processEscapes: true
    },
    TeX: {
        Macros: {
            N: '\\mathbb{N}',
            Z: '\\mathbb{Z}',
            Q: '\\mathbb{Q}',
            R: '\\mathbb{R}',
            C: '\\mathbb{C}',
            ord: '\\operatorname{ord}',
            bm: ["\\boldsymbol{ {{- "#1" -}} }", 1]{# テンプレート文法を回避する #}
        }
    },
    "HTML-CSS": {
        mtextFontInherit: true,
        availableFonts: ["SansMathFonts", "CMBright", "TeX"],
        webFont: "SansMathFonts"
    },
    CommonHTML: {
        mtextFontInherit: true
    },
    SVG: {
        mtextFontInherit: true,
        font: "SansMathFonts"
    },
    MathML: {
        mtextFontInherit: true
    },
    displayAlign: "left",
    displayIndent: "4em"
};
</script>
<script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js?config=TeX-AMS-MML_HTMLorMML" defer></script>
<script type="text/javascript">
// settings for autopagerize/autopatchwork with MathJax
if (window.addEventListener) {
    var NodeInsert = function(evt) { window.MathJax.Hub.Queue(["Typeset", MathJax.Hub, evt.target]); };
    window.addEventListener('AutoPagerize_DOMNodeInserted', NodeInsert, false);
    window.addEventListener('AutoPatchWork.DOMNodeInserted', NodeInsert, false);
}
</script>
<script type="text/javascript" src="//s.hatena.ne.jp/js/HatenaStar.js"></script>
<script type="text/javascript">
Hatena.Star.Token = "{{ context.config.hatena_star_token }}";
Hatena.Star.SiteConfig = {
    entryNodes: {
        "main.posts article": {
            uri: "aside a.permalink",
            title: "h3",
            container: "h3"
        }
    }
};
// settings for autopagerize/autopatchwork with hatena-star.
if (window.addEventListener) {
    var NodeInsert = function(evt) {
        // NOTE: https://s.hatena.ne.jp/js/HatenaStar.js の詳細に依存した実装。
        // EntryLoader.loadNewEntriesは単一のエントリを生やすことができなさそうなので。
        var entries_org = Hatena.Star.EntryLoader.entries;
        Hatena.Star.EntryLoader.entries = null;
        var entry = Hatena.Star.EntryLoader.getEntryByENodeAndSelectors(evt.target, Hatena.Star.SiteConfig.entryNodes["main.posts article"]);
        Hatena.Star.EntryLoader.entries = [];
        var e = new Hatena.Star.Entry(entry);
        e.showButtons();
        Hatena.Star.EntryLoader.entries.push(e);
        Hatena.Star.EntryLoader.getStarEntries();
        Hatena.Star.EntryLoader.entries = Hatena.Star.EntryLoader.entries.concat(entries_org);
    };
    window.addEventListener("AutoPagerize_DOMNodeInserted", NodeInsert, false);
    window.addEventListener("AutoPatchWork.DOMNodeInserted", NodeInsert, false);
}
</script>
<style>
.hatena-star-star-container, .hatena-star-comment-container {
    display: inline-block;
    font-size: 1rem;
    line-height: 16px;
    vertical-align: top;
}
.hatena-star-star-container a {
    display: inline-block;
    margin-top: 1px;
    vertical-align: middle;
}
</style>
<script type="text/javascript">
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga("create", "{{ context.config.ga_code }}", "auto");
ga("send", "pageview");
</script>
<script type="text/javascript" async src="https://www.google-analytics.com/analytics.js"></script>
